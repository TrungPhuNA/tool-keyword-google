const puppeteer = require('puppeteer');

async function simpleTest() {
    console.log('üß™ Test ƒë∆°n gi·∫£n...');
    
    let browser = null;
    
    try {
        // Kh·ªüi t·∫°o browser v·ªõi c·∫•u h√¨nh t·ªëi thi·ªÉu
        browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args: ['--no-sandbox']
        });
        
        console.log('‚úÖ Browser ƒë√£ kh·ªüi t·∫°o');
        
        const page = await browser.newPage();
        console.log('‚úÖ Page ƒë√£ t·∫°o');
        
        // Test 1: Truy c·∫≠p trang ƒë∆°n gi·∫£n
        console.log('üåê Test 1: Truy c·∫≠p example.com...');
        await page.goto('https://example.com', { timeout: 10000 });
        
        let url = page.url();
        let title = await page.title();
        console.log(`üìç URL: ${url}`);
        console.log(`üìÑ Title: ${title}`);
        
        if (url.includes('about:blank')) {
            console.log('‚ùå V·∫´n b·ªã about:blank - c√≥ v·∫•n ƒë·ªÅ v·ªõi network');
            return;
        }
        
        console.log('‚úÖ Test 1 th√†nh c√¥ng!');
        
        // Test 2: Truy c·∫≠p Google
        console.log('üåê Test 2: Truy c·∫≠p Google...');
        await page.goto('https://www.google.com', { timeout: 10000 });
        
        url = page.url();
        title = await page.title();
        console.log(`üìç URL: ${url}`);
        console.log(`üìÑ Title: ${title}`);
        
        if (url.includes('about:blank')) {
            console.log('‚ùå Google b·ªã ch·∫∑n - th·ª≠ DuckDuckGo');
            
            // Test 3: DuckDuckGo
            console.log('üåê Test 3: Truy c·∫≠p DuckDuckGo...');
            await page.goto('https://duckduckgo.com', { timeout: 10000 });
            
            url = page.url();
            title = await page.title();
            console.log(`üìç URL: ${url}`);
            console.log(`üìÑ Title: ${title}`);
        }
        
        console.log('‚úÖ Test ho√†n th√†nh!');
        console.log('üîç Ki·ªÉm tra browser window ƒë·ªÉ xem trang c√≥ load kh√¥ng');
        console.log('‚è≥ Browser s·∫Ω m·ªü 10 gi√¢y ƒë·ªÉ b·∫°n xem...');
        
        // Gi·ªØ browser m·ªü 10 gi√¢y
        await new Promise(resolve => setTimeout(resolve, 10000));
        
    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
        
        // Ki·ªÉm tra network
        console.log('\nüîß Ki·ªÉm tra network:');
        console.log('1. B·∫°n c√≥ ƒëang d√πng VPN/Proxy kh√¥ng?');
        console.log('2. Firewall c√≥ ch·∫∑n Chrome kh√¥ng?');
        console.log('3. Th·ª≠ t·∫Øt antivirus t·∫°m th·ªùi');
        console.log('4. Ki·ªÉm tra DNS: nslookup google.com');
        
    } finally {
        if (browser) {
            await browser.close();
        }
    }
}

simpleTest();
