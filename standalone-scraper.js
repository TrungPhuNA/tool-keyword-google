const puppeteer = require('puppeteer');

async function scrapeKeywords(keyword) {
    console.log(`üîç T√¨m ki·∫øm t·ª´ kh√≥a: "${keyword}"`);
    
    let browser = null;
    
    try {
        // Kh·ªüi t·∫°o browser v·ªõi anti-detection
        browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--no-first-run',
                '--no-zygote',
                '--disable-gpu',
                '--disable-features=VizDisplayCompositor',
                '--disable-extensions',
                '--disable-default-apps',
                '--disable-sync',
                '--disable-translate',
                '--hide-scrollbars',
                '--metrics-recording-only',
                '--mute-audio',
                '--no-default-browser-check',
                '--safebrowsing-disable-auto-update',
                '--disable-background-timer-throttling',
                '--disable-backgrounding-occluded-windows',
                '--disable-renderer-backgrounding',
                '--disable-features=TranslateUI',
                '--disable-ipc-flooding-protection'
            ]
        });

        console.log('‚úÖ Browser ƒë√£ kh·ªüi t·∫°o v·ªõi anti-detection');

        const page = await browser.newPage();

        // Anti-detection measures
        console.log('üõ°Ô∏è  Thi·∫øt l·∫≠p anti-detection...');

        // 1. User Agent ng·∫´u nhi√™n
        const userAgents = [
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0'
        ];
        const randomUA = userAgents[Math.floor(Math.random() * userAgents.length)];
        await page.setUserAgent(randomUA);
        console.log(`üé≠ User Agent: ${randomUA}`);

        // 2. Viewport ng·∫´u nhi√™n
        const viewports = [
            { width: 1366, height: 768 },
            { width: 1920, height: 1080 },
            { width: 1440, height: 900 },
            { width: 1280, height: 720 }
        ];
        const randomViewport = viewports[Math.floor(Math.random() * viewports.length)];
        await page.setViewport(randomViewport);
        console.log(`üì± Viewport: ${randomViewport.width}x${randomViewport.height}`);

        // 3. Headers gi·ªëng ng∆∞·ªùi th·∫≠t
        await page.setExtraHTTPHeaders({
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
            'Accept-Encoding': 'gzip, deflate, br',
            'Accept-Language': 'vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7',
            'Cache-Control': 'max-age=0',
            'Sec-Ch-Ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
            'Sec-Ch-Ua-Mobile': '?0',
            'Sec-Ch-Ua-Platform': '"macOS"',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'none',
            'Sec-Fetch-User': '?1',
            'Upgrade-Insecure-Requests': '1'
        });

        // 4. Override c√°c thu·ªôc t√≠nh bot detection
        await page.evaluateOnNewDocument(() => {
            // Override webdriver
            Object.defineProperty(navigator, 'webdriver', {
                get: () => undefined,
            });

            // Override plugins
            Object.defineProperty(navigator, 'plugins', {
                get: () => [1, 2, 3, 4, 5],
            });

            // Override languages
            Object.defineProperty(navigator, 'languages', {
                get: () => ['vi-VN', 'vi', 'en-US', 'en'],
            });

            // Override permissions
            const originalQuery = window.navigator.permissions.query;
            window.navigator.permissions.query = (parameters) => (
                parameters.name === 'notifications' ?
                    Promise.resolve({ state: Cypress.env('NOTIFICATION_PERMISSION') || 'granted' }) :
                    originalQuery(parameters)
            );

            // Mock chrome object
            window.chrome = {
                runtime: {},
            };
        });
        console.log('‚úÖ Page ƒë√£ t·∫°o');
        
        // Human-like behavior: Truy c·∫≠p Google homepage tr∆∞·ªõc
        console.log('üè† Truy c·∫≠p Google homepage tr∆∞·ªõc...');
        await page.goto('https://www.google.com', {
            waitUntil: 'domcontentloaded',
            timeout: 15000
        });

        // Random delay nh∆∞ ng∆∞·ªùi th·∫≠t
        const delay1 = 2000 + Math.random() * 3000; // 2-5 gi√¢y
        console.log(`‚è≥ Ch·ªù ${Math.round(delay1/1000)}s nh∆∞ ng∆∞·ªùi th·∫≠t...`);
        await new Promise(resolve => setTimeout(resolve, delay1));

        // Simulate mouse movement
        await page.mouse.move(100, 100);
        await page.mouse.move(200, 200);

        // Truy c·∫≠p search URL
        const searchUrl = `https://www.google.com/search?q=${encodeURIComponent(keyword)}`;
        console.log(`üîç Truy c·∫≠p search: ${searchUrl}`);

        await page.goto(searchUrl, {
            waitUntil: 'domcontentloaded',
            timeout: 15000
        });
        
        const currentUrl = page.url();
        const title = await page.title();
        
        console.log(`üìç URL: ${currentUrl}`);
        console.log(`üìÑ Title: ${title}`);
        
        if (currentUrl.includes('about:blank')) {
            console.log('‚ùå V·∫´n b·ªã about:blank');
            return [];
        }
        
        console.log('‚úÖ Trang ƒë√£ load th√†nh c√¥ng!');
        
        // Screenshot
        await page.screenshot({ path: 'standalone-search.png', fullPage: true });
        console.log('üì∏ Screenshot: standalone-search.png');

        // Human-like behavior: ƒë·ªçc trang tr∆∞·ªõc khi scroll
        const delay2 = 3000 + Math.random() * 2000; // 3-5 gi√¢y
        console.log(`üëÄ ƒê·ªçc trang ${Math.round(delay2/1000)}s...`);
        await new Promise(resolve => setTimeout(resolve, delay2));

        // Simulate human scrolling
        console.log('üìú Scroll t·ª´ t·ª´ nh∆∞ ng∆∞·ªùi th·∫≠t...');
        await page.evaluate(() => {
            return new Promise((resolve) => {
                let totalHeight = 0;
                const distance = 100;
                const timer = setInterval(() => {
                    const scrollHeight = document.body.scrollHeight;
                    window.scrollBy(0, distance);
                    totalHeight += distance;

                    if(totalHeight >= scrollHeight/2){
                        clearInterval(timer);
                        resolve();
                    }
                }, 100);
            });
        });

        // Random delay sau scroll
        const delay3 = 2000 + Math.random() * 2000; // 2-4 gi√¢y
        console.log(`‚è≥ Ch·ªù ${Math.round(delay3/1000)}s sau scroll...`);
        await new Promise(resolve => setTimeout(resolve, delay3));
        
        // T√¨m t·ª´ kh√≥a li√™n quan
        console.log('üîç T√¨m t·ª´ kh√≥a li√™n quan...');

        const keywords = await page.evaluate(() => {
            const results = [];

            // T√¨m ph·∫ßn "M·ªçi ng∆∞·ªùi c≈©ng t√¨m ki·∫øm" theo c·∫•u tr√∫c HTML th·ª±c t·∫ø
            console.log('üîç T√¨m ph·∫ßn "M·ªçi ng∆∞·ªùi c≈©ng t√¨m ki·∫øm"...');

            // T√¨m container ch√≠nh
            const relatedContainer = document.querySelector('.y6Uyqe');
            if (!relatedContainer) {
                console.log('‚ùå Kh√¥ng t√¨m th·∫•y container .y6Uyqe');
                return results;
            }

            console.log('‚úÖ T√¨m th·∫•y container related searches');

            // T√¨m t·∫•t c·∫£ c√°c link trong ph·∫ßn related searches
            const relatedLinks = relatedContainer.querySelectorAll('a.ngTNl.ggLgoc');
            console.log(`üìã T√¨m th·∫•y ${relatedLinks.length} related links`);

            for (let i = 0; i < relatedLinks.length; i++) {
                const link = relatedLinks[i];

                // T√¨m text trong span.dg6jd.JGD2rd
                const textSpan = link.querySelector('span.dg6jd.JGD2rd');
                if (textSpan) {
                    let text = textSpan.textContent || textSpan.innerText || '';

                    // L√†m s·∫°ch text (lo·∫°i b·ªè c√°c tag <b>)
                    text = text.replace(/<[^>]*>/g, '').trim();

                    if (text && text.length > 3) {
                        console.log(`${i + 1}. "${text}"`);
                        results.push(text);
                    }
                }

                // Backup: l·∫•y t·ª´ href n·∫øu kh√¥ng c√≥ text
                if (!textSpan) {
                    try {
                        const href = link.href;
                        if (href && href.includes('/search?q=')) {
                            const url = new URL(href);
                            const query = decodeURIComponent(url.searchParams.get('q') || '');

                            if (query && query.length > 3) {
                                console.log(`${i + 1}. (t·ª´ URL) "${query}"`);
                                results.push(query);
                            }
                        }
                    } catch (e) {
                        console.log(`L·ªói parse URL: ${e.message}`);
                    }
                }
            }

            console.log(`üéØ T·ªïng c·ªông t√¨m th·∫•y ${results.length} t·ª´ kh√≥a`);
            return results;
        });
        
        // L√†m s·∫°ch k·∫øt qu·∫£
        const cleanKeywords = [...new Set(keywords)]
            .filter(kw => kw && kw.length > 3)
            .slice(0, 10);
        
        console.log(`üéØ T√¨m th·∫•y ${cleanKeywords.length} t·ª´ kh√≥a:`);
        cleanKeywords.forEach((kw, index) => {
            console.log(`  ${index + 1}. "${kw}"`);
        });
        
        // Gi·ªØ browser m·ªü 10 gi√¢y ƒë·ªÉ xem
        console.log('‚è≥ Gi·ªØ browser m·ªü 10 gi√¢y ƒë·ªÉ xem k·∫øt qu·∫£...');
        await new Promise(resolve => setTimeout(resolve, 10000));
        
        return cleanKeywords;
        
    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
        return [];
        
    } finally {
        if (browser) {
            await browser.close();
        }
    }
}

// Ch·∫°y scraper
async function main() {
    const keyword = process.argv[2] || "Code ƒë·ªì √°n";
    console.log(`üöÄ B·∫Øt ƒë·∫ßu scrape v·ªõi t·ª´ kh√≥a: "${keyword}"`);
    
    const results = await scrapeKeywords(keyword);
    
    if (results.length > 0) {
        console.log('\nüéâ K·∫øt qu·∫£ cu·ªëi c√πng:');
        results.forEach((kw, index) => {
            console.log(`${index + 1}. ${kw}`);
        });
    } else {
        console.log('\nüòû Kh√¥ng t√¨m th·∫•y t·ª´ kh√≥a n√†o');
    }
}

main().catch(console.error);
